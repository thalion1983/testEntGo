// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"testEntGo/ent/clothe"
	"testEntGo/ent/people"
	"testEntGo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClotheUpdate is the builder for updating Clothe entities.
type ClotheUpdate struct {
	config
	hooks    []Hook
	mutation *ClotheMutation
}

// Where appends a list predicates to the ClotheUpdate builder.
func (cu *ClotheUpdate) Where(ps ...predicate.Clothe) *ClotheUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetType sets the "type" field.
func (cu *ClotheUpdate) SetType(s string) *ClotheUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *ClotheUpdate) SetNillableType(s *string) *ClotheUpdate {
	if s != nil {
		cu.SetType(*s)
	}
	return cu
}

// SetColor sets the "color" field.
func (cu *ClotheUpdate) SetColor(s string) *ClotheUpdate {
	cu.mutation.SetColor(s)
	return cu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (cu *ClotheUpdate) SetNillableColor(s *string) *ClotheUpdate {
	if s != nil {
		cu.SetColor(*s)
	}
	return cu
}

// SetBuyDate sets the "buy_date" field.
func (cu *ClotheUpdate) SetBuyDate(t time.Time) *ClotheUpdate {
	cu.mutation.SetBuyDate(t)
	return cu
}

// SetNillableBuyDate sets the "buy_date" field if the given value is not nil.
func (cu *ClotheUpdate) SetNillableBuyDate(t *time.Time) *ClotheUpdate {
	if t != nil {
		cu.SetBuyDate(*t)
	}
	return cu
}

// SetOwnerID sets the "owner" edge to the People entity by ID.
func (cu *ClotheUpdate) SetOwnerID(id int) *ClotheUpdate {
	cu.mutation.SetOwnerID(id)
	return cu
}

// SetNillableOwnerID sets the "owner" edge to the People entity by ID if the given value is not nil.
func (cu *ClotheUpdate) SetNillableOwnerID(id *int) *ClotheUpdate {
	if id != nil {
		cu = cu.SetOwnerID(*id)
	}
	return cu
}

// SetOwner sets the "owner" edge to the People entity.
func (cu *ClotheUpdate) SetOwner(p *People) *ClotheUpdate {
	return cu.SetOwnerID(p.ID)
}

// Mutation returns the ClotheMutation object of the builder.
func (cu *ClotheUpdate) Mutation() *ClotheMutation {
	return cu.mutation
}

// ClearOwner clears the "owner" edge to the People entity.
func (cu *ClotheUpdate) ClearOwner() *ClotheUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClotheUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClotheUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClotheUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClotheUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ClotheUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(clothe.Table, clothe.Columns, sqlgraph.NewFieldSpec(clothe.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(clothe.FieldType, field.TypeString, value)
	}
	if value, ok := cu.mutation.Color(); ok {
		_spec.SetField(clothe.FieldColor, field.TypeString, value)
	}
	if value, ok := cu.mutation.BuyDate(); ok {
		_spec.SetField(clothe.FieldBuyDate, field.TypeTime, value)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clothe.OwnerTable,
			Columns: []string{clothe.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(people.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clothe.OwnerTable,
			Columns: []string{clothe.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(people.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clothe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ClotheUpdateOne is the builder for updating a single Clothe entity.
type ClotheUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClotheMutation
}

// SetType sets the "type" field.
func (cuo *ClotheUpdateOne) SetType(s string) *ClotheUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *ClotheUpdateOne) SetNillableType(s *string) *ClotheUpdateOne {
	if s != nil {
		cuo.SetType(*s)
	}
	return cuo
}

// SetColor sets the "color" field.
func (cuo *ClotheUpdateOne) SetColor(s string) *ClotheUpdateOne {
	cuo.mutation.SetColor(s)
	return cuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (cuo *ClotheUpdateOne) SetNillableColor(s *string) *ClotheUpdateOne {
	if s != nil {
		cuo.SetColor(*s)
	}
	return cuo
}

// SetBuyDate sets the "buy_date" field.
func (cuo *ClotheUpdateOne) SetBuyDate(t time.Time) *ClotheUpdateOne {
	cuo.mutation.SetBuyDate(t)
	return cuo
}

// SetNillableBuyDate sets the "buy_date" field if the given value is not nil.
func (cuo *ClotheUpdateOne) SetNillableBuyDate(t *time.Time) *ClotheUpdateOne {
	if t != nil {
		cuo.SetBuyDate(*t)
	}
	return cuo
}

// SetOwnerID sets the "owner" edge to the People entity by ID.
func (cuo *ClotheUpdateOne) SetOwnerID(id int) *ClotheUpdateOne {
	cuo.mutation.SetOwnerID(id)
	return cuo
}

// SetNillableOwnerID sets the "owner" edge to the People entity by ID if the given value is not nil.
func (cuo *ClotheUpdateOne) SetNillableOwnerID(id *int) *ClotheUpdateOne {
	if id != nil {
		cuo = cuo.SetOwnerID(*id)
	}
	return cuo
}

// SetOwner sets the "owner" edge to the People entity.
func (cuo *ClotheUpdateOne) SetOwner(p *People) *ClotheUpdateOne {
	return cuo.SetOwnerID(p.ID)
}

// Mutation returns the ClotheMutation object of the builder.
func (cuo *ClotheUpdateOne) Mutation() *ClotheMutation {
	return cuo.mutation
}

// ClearOwner clears the "owner" edge to the People entity.
func (cuo *ClotheUpdateOne) ClearOwner() *ClotheUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// Where appends a list predicates to the ClotheUpdate builder.
func (cuo *ClotheUpdateOne) Where(ps ...predicate.Clothe) *ClotheUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClotheUpdateOne) Select(field string, fields ...string) *ClotheUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Clothe entity.
func (cuo *ClotheUpdateOne) Save(ctx context.Context) (*Clothe, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClotheUpdateOne) SaveX(ctx context.Context) *Clothe {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClotheUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClotheUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ClotheUpdateOne) sqlSave(ctx context.Context) (_node *Clothe, err error) {
	_spec := sqlgraph.NewUpdateSpec(clothe.Table, clothe.Columns, sqlgraph.NewFieldSpec(clothe.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Clothe.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clothe.FieldID)
		for _, f := range fields {
			if !clothe.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != clothe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(clothe.FieldType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Color(); ok {
		_spec.SetField(clothe.FieldColor, field.TypeString, value)
	}
	if value, ok := cuo.mutation.BuyDate(); ok {
		_spec.SetField(clothe.FieldBuyDate, field.TypeTime, value)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clothe.OwnerTable,
			Columns: []string{clothe.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(people.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clothe.OwnerTable,
			Columns: []string{clothe.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(people.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Clothe{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clothe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
