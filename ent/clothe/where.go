// Code generated by ent, DO NOT EDIT.

package clothe

import (
	"testEntGo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Clothe {
	return predicate.Clothe(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Clothe {
	return predicate.Clothe(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Clothe {
	return predicate.Clothe(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Clothe {
	return predicate.Clothe(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Clothe {
	return predicate.Clothe(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Clothe {
	return predicate.Clothe(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Clothe {
	return predicate.Clothe(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Clothe {
	return predicate.Clothe(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Clothe {
	return predicate.Clothe(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldEQ(FieldType, v))
}

// Color applies equality check predicate on the "color" field. It's identical to ColorEQ.
func Color(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldEQ(FieldColor, v))
}

// BuyDate applies equality check predicate on the "buy_date" field. It's identical to BuyDateEQ.
func BuyDate(v time.Time) predicate.Clothe {
	return predicate.Clothe(sql.FieldEQ(FieldBuyDate, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Clothe {
	return predicate.Clothe(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Clothe {
	return predicate.Clothe(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldContainsFold(FieldType, v))
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldEQ(FieldColor, v))
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldNEQ(FieldColor, v))
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...string) predicate.Clothe {
	return predicate.Clothe(sql.FieldIn(FieldColor, vs...))
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...string) predicate.Clothe {
	return predicate.Clothe(sql.FieldNotIn(FieldColor, vs...))
}

// ColorGT applies the GT predicate on the "color" field.
func ColorGT(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldGT(FieldColor, v))
}

// ColorGTE applies the GTE predicate on the "color" field.
func ColorGTE(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldGTE(FieldColor, v))
}

// ColorLT applies the LT predicate on the "color" field.
func ColorLT(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldLT(FieldColor, v))
}

// ColorLTE applies the LTE predicate on the "color" field.
func ColorLTE(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldLTE(FieldColor, v))
}

// ColorContains applies the Contains predicate on the "color" field.
func ColorContains(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldContains(FieldColor, v))
}

// ColorHasPrefix applies the HasPrefix predicate on the "color" field.
func ColorHasPrefix(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldHasPrefix(FieldColor, v))
}

// ColorHasSuffix applies the HasSuffix predicate on the "color" field.
func ColorHasSuffix(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldHasSuffix(FieldColor, v))
}

// ColorEqualFold applies the EqualFold predicate on the "color" field.
func ColorEqualFold(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldEqualFold(FieldColor, v))
}

// ColorContainsFold applies the ContainsFold predicate on the "color" field.
func ColorContainsFold(v string) predicate.Clothe {
	return predicate.Clothe(sql.FieldContainsFold(FieldColor, v))
}

// BuyDateEQ applies the EQ predicate on the "buy_date" field.
func BuyDateEQ(v time.Time) predicate.Clothe {
	return predicate.Clothe(sql.FieldEQ(FieldBuyDate, v))
}

// BuyDateNEQ applies the NEQ predicate on the "buy_date" field.
func BuyDateNEQ(v time.Time) predicate.Clothe {
	return predicate.Clothe(sql.FieldNEQ(FieldBuyDate, v))
}

// BuyDateIn applies the In predicate on the "buy_date" field.
func BuyDateIn(vs ...time.Time) predicate.Clothe {
	return predicate.Clothe(sql.FieldIn(FieldBuyDate, vs...))
}

// BuyDateNotIn applies the NotIn predicate on the "buy_date" field.
func BuyDateNotIn(vs ...time.Time) predicate.Clothe {
	return predicate.Clothe(sql.FieldNotIn(FieldBuyDate, vs...))
}

// BuyDateGT applies the GT predicate on the "buy_date" field.
func BuyDateGT(v time.Time) predicate.Clothe {
	return predicate.Clothe(sql.FieldGT(FieldBuyDate, v))
}

// BuyDateGTE applies the GTE predicate on the "buy_date" field.
func BuyDateGTE(v time.Time) predicate.Clothe {
	return predicate.Clothe(sql.FieldGTE(FieldBuyDate, v))
}

// BuyDateLT applies the LT predicate on the "buy_date" field.
func BuyDateLT(v time.Time) predicate.Clothe {
	return predicate.Clothe(sql.FieldLT(FieldBuyDate, v))
}

// BuyDateLTE applies the LTE predicate on the "buy_date" field.
func BuyDateLTE(v time.Time) predicate.Clothe {
	return predicate.Clothe(sql.FieldLTE(FieldBuyDate, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Clothe {
	return predicate.Clothe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.People) predicate.Clothe {
	return predicate.Clothe(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Clothe) predicate.Clothe {
	return predicate.Clothe(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Clothe) predicate.Clothe {
	return predicate.Clothe(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Clothe) predicate.Clothe {
	return predicate.Clothe(sql.NotPredicates(p))
}
