// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"testEntGo/ent/clothe"
	"testEntGo/ent/group"
	"testEntGo/ent/people"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PeopleCreate is the builder for creating a People entity.
type PeopleCreate struct {
	config
	mutation *PeopleMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *PeopleCreate) SetName(s string) *PeopleCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetLastName sets the "last_name" field.
func (pc *PeopleCreate) SetLastName(s string) *PeopleCreate {
	pc.mutation.SetLastName(s)
	return pc
}

// SetAge sets the "age" field.
func (pc *PeopleCreate) SetAge(i int) *PeopleCreate {
	pc.mutation.SetAge(i)
	return pc
}

// AddClotheIDs adds the "clothes" edge to the Clothe entity by IDs.
func (pc *PeopleCreate) AddClotheIDs(ids ...int) *PeopleCreate {
	pc.mutation.AddClotheIDs(ids...)
	return pc
}

// AddClothes adds the "clothes" edges to the Clothe entity.
func (pc *PeopleCreate) AddClothes(c ...*Clothe) *PeopleCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddClotheIDs(ids...)
}

// AddKindIDs adds the "kind" edge to the Group entity by IDs.
func (pc *PeopleCreate) AddKindIDs(ids ...int) *PeopleCreate {
	pc.mutation.AddKindIDs(ids...)
	return pc
}

// AddKind adds the "kind" edges to the Group entity.
func (pc *PeopleCreate) AddKind(g ...*Group) *PeopleCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pc.AddKindIDs(ids...)
}

// Mutation returns the PeopleMutation object of the builder.
func (pc *PeopleCreate) Mutation() *PeopleMutation {
	return pc.mutation
}

// Save creates the People in the database.
func (pc *PeopleCreate) Save(ctx context.Context) (*People, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PeopleCreate) SaveX(ctx context.Context) *People {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PeopleCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PeopleCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PeopleCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "People.name"`)}
	}
	if _, ok := pc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "People.last_name"`)}
	}
	if _, ok := pc.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "People.age"`)}
	}
	if v, ok := pc.mutation.Age(); ok {
		if err := people.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "People.age": %w`, err)}
		}
	}
	return nil
}

func (pc *PeopleCreate) sqlSave(ctx context.Context) (*People, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PeopleCreate) createSpec() (*People, *sqlgraph.CreateSpec) {
	var (
		_node = &People{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(people.Table, sqlgraph.NewFieldSpec(people.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(people.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.LastName(); ok {
		_spec.SetField(people.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := pc.mutation.Age(); ok {
		_spec.SetField(people.FieldAge, field.TypeInt, value)
		_node.Age = value
	}
	if nodes := pc.mutation.ClothesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   people.ClothesTable,
			Columns: []string{people.ClothesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clothe.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.KindIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   people.KindTable,
			Columns: people.KindPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PeopleCreateBulk is the builder for creating many People entities in bulk.
type PeopleCreateBulk struct {
	config
	err      error
	builders []*PeopleCreate
}

// Save creates the People entities in the database.
func (pcb *PeopleCreateBulk) Save(ctx context.Context) ([]*People, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*People, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PeopleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PeopleCreateBulk) SaveX(ctx context.Context) []*People {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PeopleCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PeopleCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
